@model NewsManagementSystem.BusinessObject.ModelsDTO.NewsReportStatsDto
@{
Layout = "~/Views/Shared/_LayoutAll.cshtml";
}

<style>
    h2 {
        color: #2c3e50; /* Màu xanh đậm, bạn có thể đổi mã màu */
    }

    p {
        color: #7f8c8d;
    }

    .table th, .table td {
        vertical-align: middle;
        font-size: 0.95rem;
    }

    .badge {
        font-size: 0.85rem;
    }

    .section-heading {
        margin-top: 2rem;
        font-size: 1.2rem;
        color: #34495e;
        font-weight: 500;
    }

    .chart-container {
        position: relative;
        height: 400px;
        margin: 20px 0;
    }

    .stats-card {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 20px;
        margin: 15px 0;
        border-left: 4px solid #3498db;
    }

    .chart-row {
        display: flex;
        gap: 20px;
        margin: 20px 0;
    }

    .chart-col {
        flex: 1;
    }

    .pagination-controls {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin: 20px 0;
    }

    .pagination {
        margin: 0;
    }

    .page-size-selector {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .pagination .page-link {
        cursor: pointer;
    }

    html {
        scroll-behavior: smooth;
    }

    @@media (max-width: 768px) {
        .chart-row {
            flex-direction: column;
        }
        .pagination-controls {
            flex-direction: column;
            gap: 15px;
        }
    }
</style>

<!-- Chart.js CDN -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<h2>📊 News Articles Report</h2>

<div class="stats-card">
    <p><strong>Period:</strong> @ViewBag.StartDate to @ViewBag.EndDate</p>
    <p><strong>Total Articles:</strong> @Model.TotalArticles</p>
    <p><strong>Active:</strong> @Model.ActiveArticles | <strong>Inactive:</strong> @Model.InactiveArticles</p>
    <p><strong>Most Active Author:</strong> @Model.MostActiveAuthor</p>
</div>

<!-- Charts Section -->
<div class="chart-row">
    <div class="chart-col">
        <div class="section-heading">📈 Articles Status Distribution</div>
        <div class="chart-container">
            <canvas id="statusChart"></canvas>
        </div>
    </div>
    <div class="chart-col">
        <div class="section-heading">📂 Articles by Category</div>
        <div class="chart-container">
            <canvas id="categoryChart"></canvas>
        </div>
    </div>
</div>

<div class="section-heading">📅 Articles Timeline</div>
<div class="chart-container">
    <canvas id="timelineChart"></canvas>
</div>

<!-- Articles by Category Table -->
<div class="section-heading">Articles by Category (Table)</div>
<table class="table table-bordered">
    <thead>
    <tr>
        <th>Category</th>
        <th>Count</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var item in Model.ArticlesByCategory)
    {
    <tr>
        <td>@item.Key</td>
        <td>@item.Value</td>
    </tr>
    }
    </tbody>
</table>

<!-- Detailed Articles with Pagination -->
<div class="section-heading">📋 Detailed Articles</div>

<div class="pagination-controls">
    <div class="page-size-selector">
        <label for="pageSize">Show:</label>
        <select id="pageSize" class="form-select form-select-sm" style="width: auto;">
            <option value="5">5</option>
            <option value="10" selected>10</option>
            <option value="25">25</option>
            <option value="50">50</option>
        </select>
        <span>entries</span>
    </div>
    <div>
        <span id="pageInfo">Showing 1 to 10 of @Model.Articles.Count entries</span>
    </div>
</div>

<table class="table table-bordered" id="articlesTable">
    <thead>
    <tr>
        <th>Title</th>
        <th>Category</th>
        <th>Author</th>
        <th>Created Date</th>
        <th>Status</th>
    </tr>
    </thead>
    <tbody id="articlesTableBody">
    @foreach (var article in Model.Articles)
    {
    <tr>
        <td>@article.Title</td>
        <td>@article.Category</td>
        <td>@article.Author</td>
        <td>@article.CreatedDate?.ToString("yyyy-MM-dd")</td>
        <td>
            @if (article.IsActive)
            {
            <span class="badge bg-success">Active</span>
            }
            else
            {
            <span class="badge bg-secondary">Inactive</span>
            }
        </td>
    </tr>
    }
    </tbody>
</table>

<!-- Pagination Navigation -->
<nav aria-label="Articles pagination">
    <ul class="pagination justify-content-center" id="pagination">
        <!-- Pagination will be generated by JavaScript -->
    </ul>
</nav>

<script>
    // Articles data for pagination
    const articlesData = @Html.Raw(Json.Serialize(Model.Articles));
    let currentPage = 1;
    let pageSize = 10;

    function displayArticles(page, size) {
        const startIndex = (page - 1) * size;
        const endIndex = startIndex + size;
        const pageArticles = articlesData.slice(startIndex, endIndex);

        const tbody = document.getElementById('articlesTableBody');
        tbody.innerHTML = '';

        pageArticles.forEach(article => {
            const row = document.createElement('tr');
            const statusBadge = article.isActive
                ? '<span class="badge bg-success">Active</span>'
                : '<span class="badge bg-secondary">Inactive</span>';

            const createdDate = article.createdDate
                ? new Date(article.createdDate).toISOString().split('T')[0]
                : '';

            row.innerHTML = `
            <td>${article.title}</td>
            <td>${article.category}</td>
            <td>${article.author}</td>
            <td>${createdDate}</td>
            <td>${statusBadge}</td>
        `;
            tbody.appendChild(row);
        });

        updatePageInfo(page, size);
        generatePagination(page, size);
    }

    function updatePageInfo(page, size) {
        const startIndex = (page - 1) * size + 1;
        const endIndex = Math.min(page * size, articlesData.length);
        const pageInfo = document.getElementById('pageInfo');
        pageInfo.textContent = `Showing ${startIndex} to ${endIndex} of ${articlesData.length} entries`;
    }

    function generatePagination(page, size) {
        const totalPages = Math.ceil(articlesData.length / size);
        const pagination = document.getElementById('pagination');
        pagination.innerHTML = '';

        // Previous button
        const prevLi = document.createElement('li');
        prevLi.className = `page-item ${page === 1 ? 'disabled' : ''}`;
        const prevLink = document.createElement('a');
        prevLink.className = 'page-link';
        prevLink.href = '#';
        prevLink.textContent = 'Previous';
        prevLink.addEventListener('click', function(e) {
            e.preventDefault();
            if (page > 1) changePage(page - 1);
        });
        prevLi.appendChild(prevLink);
        pagination.appendChild(prevLi);

        // Page numbers
        const startPage = Math.max(1, page - 2);
        const endPage = Math.min(totalPages, page + 2);

        if (startPage > 1) {
            const firstLi = document.createElement('li');
            firstLi.className = 'page-item';
            const firstLink = document.createElement('a');
            firstLink.className = 'page-link';
            firstLink.href = '#';
            firstLink.textContent = '1';
            firstLink.addEventListener('click', function(e) {
                e.preventDefault();
                changePage(1);
            });
            firstLi.appendChild(firstLink);
            pagination.appendChild(firstLi);

            if (startPage > 2) {
                const ellipsisLi = document.createElement('li');
                ellipsisLi.className = 'page-item disabled';
                ellipsisLi.innerHTML = '<span class="page-link">...</span>';
                pagination.appendChild(ellipsisLi);
            }
        }

        for (let i = startPage; i <= endPage; i++) {
            const li = document.createElement('li');
            li.className = `page-item ${i === page ? 'active' : ''}`;
            const link = document.createElement('a');
            link.className = 'page-link';
            link.href = '#';
            link.textContent = i;
            link.addEventListener('click', function(e) {
                e.preventDefault();
                changePage(i);
            });
            li.appendChild(link);
            pagination.appendChild(li);
        }

        if (endPage < totalPages) {
            if (endPage < totalPages - 1) {
                const ellipsisLi = document.createElement('li');
                ellipsisLi.className = 'page-item disabled';
                ellipsisLi.innerHTML = '<span class="page-link">...</span>';
                pagination.appendChild(ellipsisLi);
            }

            const lastLi = document.createElement('li');
            lastLi.className = 'page-item';
            const lastLink = document.createElement('a');
            lastLink.className = 'page-link';
            lastLink.href = '#';
            lastLink.textContent = totalPages;
            lastLink.addEventListener('click', function(e) {
                e.preventDefault();
                changePage(totalPages);
            });
            lastLi.appendChild(lastLink);
            pagination.appendChild(lastLi);
        }

        // Next button
        const nextLi = document.createElement('li');
        nextLi.className = `page-item ${page === totalPages ? 'disabled' : ''}`;
        const nextLink = document.createElement('a');
        nextLink.className = 'page-link';
        nextLink.href = '#';
        nextLink.textContent = 'Next';
        nextLink.addEventListener('click', function(e) {
            e.preventDefault();
            if (page < totalPages) changePage(page + 1);
        });
        nextLi.appendChild(nextLink);
        pagination.appendChild(nextLi);
    }

    function changePage(page) {
        const totalPages = Math.ceil(articlesData.length / pageSize);
        if (page >= 1 && page <= totalPages) {
            currentPage = page;
            displayArticles(currentPage, pageSize);
        }
    }

    function changePageSize() {
        const select = document.getElementById('pageSize');
        pageSize = parseInt(select.value);
        currentPage = 1;
        displayArticles(currentPage, pageSize);
    }

    document.addEventListener('DOMContentLoaded', function() {
        // Initialize charts
        const statusCtx = document.getElementById('statusChart').getContext('2d');
        new Chart(statusCtx, {
            type: 'doughnut',
            data: {
                labels: ['Active', 'Inactive'],
                datasets: [{
                    data: [@Model.ActiveArticles, @Model.InactiveArticles],
                    backgroundColor: ['#27ae60', '#95a5a6'],
                    borderWidth: 2,
                    borderColor: '#fff'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom'
                    },
                    title: {
                        display: true,
                        text: 'Article Status Distribution'
                    }
                }
            }
        });

        const categoryCtx = document.getElementById('categoryChart').getContext('2d');
        const categoryLabels = [@Html.Raw(string.Join(",", Model.ArticlesByCategory.Keys.Select(k => $"\"{k}\"")))];
        const categoryData = [@string.Join(",", Model.ArticlesByCategory.Values)];

        new Chart(categoryCtx, {
            type: 'bar',
            data: {
                labels: categoryLabels,
                datasets: [{
                    label: 'Articles Count',
                    data: categoryData,
                    backgroundColor: '#3498db',
                    borderColor: '#2980b9',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 1
                        }
                    }
                }
            }
        });

        const timelineCtx = document.getElementById('timelineChart').getContext('2d');
        const timelineLabels = [@Html.Raw(string.Join(",", Model.ArticlesByDay.Keys.Select(k => $"\"{k:yyyy-MM-dd}\"")))];
        const timelineData = [@string.Join(",", Model.ArticlesByDay.Values)];

        new Chart(timelineCtx, {
            type: 'line',
            data: {
                labels: timelineLabels,
                datasets: [{
                    label: 'Articles Published',
                    data: timelineData,
                    borderColor: '#e74c3c',
                    backgroundColor: 'rgba(231, 76, 60, 0.1)',
                    borderWidth: 2,
                    fill: true,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'top'
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 1
                        }
                    },
                    x: {
                        ticks: {
                            maxRotation: 45
                        }
                    }
                }
            }
        });

        // Initialize pagination
        displayArticles(currentPage, pageSize);

        // Add event listener for page size selector
        document.getElementById('pageSize').addEventListener('change', changePageSize);
    });
</script>
